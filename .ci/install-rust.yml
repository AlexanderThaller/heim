parameters:
    toolchain: ''

steps:
    - bash: |
        if [ -v "$TOOLCHAIN" ]; then
            echo "##vso[task.logissue type=error;]install-rust.yml is missing template parameter \"toolchain\""
            echo "##vso[task.complete result=Failed;]"
        fi
      env:
          TOOLCHAIN: ${{ parameters.toolchain }}
      displayName: Check for installation parameters

    # Linux and macOS.
    - script: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"

          if [ -x "$(command -v rustup)" ]; then
            rustup toolchain add $RUSTUP_TOOLCHAIN
          fi
      displayName: "Install Rust (nix)"
      condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
      env:
          RUSTUP_TOOLCHAIN: ${{ parameters.toolchain }}

    # Windows
    - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
          rustup toolchain add %RUSTUP_TOOLCHAIN%
      displayName: "Install Rust (windows)"
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      env:
          RUSTUP_TOOLCHAIN: ${{ parameters.toolchain }}

    - script: |
          rustc +${{ parameters.toolchain }} -Vv
          cargo +${{ parameters.toolchain }} -V
      displayName: Query rust and cargo versions
